using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Collections;
namespace DeepRockSaveEditor
{
    class Selector
    {
        private int selectedResource;
        public Selector(int selection)
        {
            selectedResource = selection;
        }

        public int getIndex(byte[] reader)
        {
            foreach (var index in Selector.PatternAt(reader, Selector.Resources[selectedResource]))
            {
                return index;
            }
            return int.MinValue;
        }

        public List<byte> getReplacementBytes(int userInput)
        {
            var userFloat = Convert.ToSingle(userInput);
            var userBytes = BitConverter.GetBytes(userFloat);
            var userBytesList = userBytes.ToList();
            return userBytesList;
        }
        
        static byte[][] Resources = {new byte[] {0x22, 0xDA, 0xA7, 0x57, 0xAD, 0x7A, 0x80, 0x49, 0x89, 0x1B, 0x17, 0xED, 0xCC, 0x2F, 0xE0, 0x98},	//Barley Bulb
                                     new byte[] {0x07, 0x85, 0x48, 0xB9, 0x32, 0x32, 0xC0, 0x40, 0x85, 0xF8, 0x92, 0xE0, 0x84, 0xA7, 0x41, 0x00},	//Yeast Cone
                                     new byte[] {0x41, 0xEA, 0x55, 0x0C, 0x1D, 0x46, 0xC5, 0x4B, 0xBE, 0x2E, 0x9C, 0xA5, 0xA7, 0xAC, 0xCB, 0x06},	//Malt Star
                                     new byte[] {0x72, 0x31, 0x22, 0x04, 0xE2, 0x87, 0xBC, 0x41, 0x81, 0x55, 0x40, 0xA0, 0xCF, 0x88, 0x12, 0x80},	//Starch Nut
                                     new byte[] {0xAA, 0xDE, 0xD8, 0x76, 0x6C, 0x22, 0x7D, 0x40, 0x80, 0x32, 0xAF, 0xD1, 0x8D, 0x63, 0x56, 0x1E},	//Magnite
                                     new byte[] {0xAF, 0x0D, 0xC4, 0xFE, 0x83, 0x61, 0xBB, 0x48, 0xB3, 0x2C, 0x92, 0xCC, 0x97, 0xE2, 0x1D, 0xE7},	//Bismor
                                     new byte[] {0x5F, 0x2B, 0xCF, 0x83, 0x47, 0x76, 0x0A, 0x42, 0xA2, 0x3B, 0x6E, 0xDC, 0x07, 0xC0, 0x94, 0x1D},	//Umanite
                                     new byte[] {0x8A, 0xA7, 0xFB, 0x43, 0x29, 0x3A, 0x0B, 0x49, 0xB8, 0xBE, 0x42, 0xFF, 0xE0, 0x68, 0xA4, 0x4C},	//Croppa
                                     new byte[] {0x48, 0x8D, 0x05, 0x14, 0x6F, 0x5F, 0x75, 0x4B, 0xA3, 0xD4, 0x61, 0x0D, 0x08, 0xC0, 0x60, 0x3E},	//Enor Pearl
                                     new byte[] {0x22, 0xBC, 0x4F, 0x7D, 0x07, 0xD1, 0x3E, 0x43, 0xBF, 0xCA, 0x81, 0xBD, 0x9C, 0x14, 0xB1, 0xAF},	//Jadiz
                                     new byte[] {0x58, 0x28, 0x65, 0x2C, 0x9A, 0x5D, 0xE8, 0x45, 0xA9, 0xE2, 0xE1, 0xB8, 0xB4, 0x63, 0xC5, 0x16},	//Error Cube
                                    };


        public static IEnumerable<int> PatternAt(byte[] source, byte[] pattern)
        {
            for (int i = 0; i < source.Length; i++)
            {
                if (source.Skip(i).Take(pattern.Length).SequenceEqual(pattern))
                {
                    yield return i;
                }
            }
        }
    }
}
